// General look and feel modifiers
.wfx-is-visuallyhidden {
  @include visuallyhidden;
}

.wfx-is-disabled {
  opacity: .6;
  &, * {
    @include preventclick;
  }
  input {
    color: color(grey, dark);
    opacity: .8;
  }
}

.wfx-is-fullscreen {
  position: absolute;
  top: 0;
  width: 100vw;
  height: 100vh;
}

.wfx-is-centered {
  text-align: center;
}

.wfx-is-capitalized {
  text-transform: capitalize;
}

.wfx-is-truncated { // requires setting a given width on the selector
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

.wfx-is-vertically-centered-container {
  @include vertically-centered-container;
}

// Look and feel modifier to be used to center content in the main placeholder
.wfx-main-content {
  @include main-content;
}

// General-purpose helpers
.wfx-clearfix {
  *zoom: 1;
  &:before, &:after {
    display: table;

    content: " ";
  }
  &:after {
    clear: both;
  }
}

// Helper classnames wrapping SASS mixins
.wfx-is-resetlist {
  @include resetlist;
}

.wfx-is-fullscreen {
  @include fullscreen;
}

.wfx-is-nopadmargin {
  @include nopadmargin;
}

.wfx-is-preventclick {
  @include preventclick;
}

/*
  HELPER LEVEL (z-index) CLASSNAMES ***
  Easily assign declaratively z-index levels based on the $levels variable set
  Eg:
  ... class="wfx-level--overlay" ...
  ... class="wfx-level--game" ... 
*/
@each $level in map-keys($levels) {
  .wfx-level--#{$level} {
    @include level($level);
  }
}

/*
  HELPER COLOR CLASSNAMES ***
  Easily bind colors to DOM elements within components' inline HTML,
  without having to resource to external SCSS files upon required. Use when no SASS is in use.
  Generated classNames feature the syntax .wfx-color--{color}-{tone}, being '-{tone}' optional. 
  Eg:
  ... class="wfx-color--red" ...
  ... class="wfx-bg--yellow-lighter" ...
  ... class="wfx-border--green-dark" ...
*/

@each $color in map-keys($palette) {
  .wfx-color--#{$color} {
    color: color($color);
  }

  .wfx-bg--#{$color} {
    background-color: color($color);
  }

  .wfx-border--#{$color} {
    border-color: color($color);
  }

  @each $tone in map-keys(map-get($palette, nth($color, 1))) { 
    .wfx-color--#{$color}-#{$tone} {
      color: color($color, $tone);
    }

    .wfx-bg--#{$color}-#{$tone} {
      background-color: color($color, $tone);
    }
    
    .wfx-border--#{$color}-#{$tone} {
      border-color: color($color, $tone);
    }
  }
}

/*
  TYPOGRAPHY HELPER CLASSNAMES ***
  Classname wrappers over generic typography rulesets
*/

.wfx-body {
  @extend %wfx-body;

  &text {
    @extend %wfx-bodytext;
  }
  
  &text--small {
    @extend %wfx-bodytext--small;
  }
}

/*
  ANIMATION HELPER CLASSNAMES ***
  Classname wrappers over generic animation rulesets
*/
.wfx-animation {
  &--slide-in {
    animation: slideIn 0.5s 1 forwards;
  }

  &--slide-in-back {
    animation: slideInBack 0.5s 1 forwards;
  }

  &--slide-in-down {
    animation: slideInDown 0.5s 1 forwards;
  }

  &--slide-out-right {
    animation: slideOutRight 1.2s 1 forwards;
  }

  &--rotate {
    animation: rotate .5s;
  }

  &--spinner {
    animation: rotate 0.4s infinite linear;
  }

  &--zoomin {
    animation: zoomIn .4s;
  }

  &--zoom-out {
    animation: zoomOut .4s;
  }

  &--fadein {
    animation: fadeIn .6s;
  }

  &--fadeOut {
    animation: fadeOut .6s;
  }

  &--flip-in-y {
    animation: flipInY 1.2s linear;
    backface-visibility: visible !important;
  }

  &--ripple {
    animation: ripple .8s ease-out;
  }

  &--bounce-in {
    animation: bounceIn 1s 0s;
  }
}